Description:

SEO Rank Checker
This tool is written with a backend in .NET5.0 (dotnet core) and a simple frontend in ReactJS.
To run it a couple of steps are needed.
It is preferable to use VSCode, as MS has deprecated the ability to load SPA sites using Visual Studio in .NET5.0 currently.
Visual Studio can be used for debugging the backend - to do so the frontend proxy must be correctly set to the backend SSL port that Visual Studio exposes (usually 44316).
Visual Studio can also be used to run the unit tests, however the latest version of VS is necessary to support .NET5.0.
The proxy must be set in the package.json file. It is currently set to "proxy": "https://localhost:5001" which is what running the dotnet code via VSCode will use.

To run using VSCode:
    Navigate to the ~\SettleSearch directory
    Open VSCode in this directory by typing 'code .' in a command shell.
    Open the terminal in vscode with [ctrl] + `
    Type 'dotnet run' and enter.
    The webserver will start and the console logs will appear in this terminal console.
    Add another terminal - no matter the type.
    Type 'cd .\client-app'
    Type 'npm start'
    The fron-end will open.

The google and bing results should load up after a short while. They will cache a copy for one hr for every distinct search term and search engine.
If not then an error message will show. It is likely an internet issue or a proxy issue.

Other searches can be tried - e.g. see the difference between 'e-settlement' rather than 'e-settlements', as can other sites.

The idea for adding other searches is to;
a) Add a new service to handle the querying and extraction and implement the ISearchService interface.
b) Register the service in the container at Startup.cs.
c) Add the new service type to the SearchEngineType enumeration.
d) Add it to the SEOSearchController as a constructor injected service same as the others.
e) Add a unit test for it and update the constructor signatures in the other unit tests. TDD build the service.
f) In the frontend, edit the App.js component and add another <SEOResultList searchEngine="XXX" searchTerm={item.term} searchSite={item.site} /> into the JSX inside another div. 
g) Run and the new list should appear below the existing - check that it appears in the grid.

Performance, Availability, Reliability
1) Use search API endpoints rather than web-scrapes. This will keep the Availability and Reliability much more stable as Search engine companies
do not change theses as much as they do their front end html.
2) Have a webjob run unattended in the cloud to collect the results each day. This will be more discrete and make the app more performant. It will also allow
time series data to be shown as added information on the tool.
3) Configure the log to output to a usage analyser or alert system uch as Prometheus.
4) Use a cloud based redis cache rather than a memorycache so as to improve the memory profile of the app and make it more resilient - able to be shut down when
not in use making it cheaper to run.